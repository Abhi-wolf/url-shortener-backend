import { nanoid } from "nanoid";
import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { Url } from "../models/url.model.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import redisClient from "../db/redisClient.js";

/**
 * @route POST /api/v1/url/register
 * @access Public
 * @desc Create a new short url
 * @param {string} url - url to shorten
 * @returns {Object} The short url generated
 */
const createNewShortUrl = asyncHandler(async (req, res) => {
  // destructure url from the request object
  const { url } = req.body;

  // if url not found return a new error with status code 400
  if (!url) {
    throw new ApiError(400, "Url is required");
  }

  // generate a new short url
  const shortUrl = nanoid(10);

  // prepare data for the database
  const newUrlData = {
    shortUrl,
    redirectUrl: url,
    visitHistory: [],
  };

  // if user present add the user info to the data
  if (req.user) {
    newUrlData.userId = req.user?._id;
  }

  // add a new entry in the database
  const newShorturl = await Url.create(newUrlData);

  // return the newly generated short url
  return res
    .status(200)
    .json(new ApiResponse(201, newShorturl, "Url created successfully"));
});

/**
 * @route GET /api/v1/url/register
 * @access Private
 * @desc Get all the short urls generated by the user
 * @param {string} userId - userId of the user
 * @returns {Object} The short url generated
 */
const getUserShortUrls = asyncHandler(async (req, res) => {
  // get userId from the request object
  const userId = req.user?._id;
  let urls = [];

  // if user not present return a new error with status code 401
  if (!userId) {
    return res.status(401).json(new ApiError(401, "Unauthorized user"));
  }

  // fetch all the urls generated by the user
  urls = await Url.find({ userId });

  // return the urls as a response
  return res.status(200).json(new ApiResponse(201, urls, "All urls"));
});

/**
 * @route GET /api/v1/url/register
 * @access Public
 * @desc get the redirect url
 * @param {string} url - shorted url
 * @returns {Object} The redirected url
 */
const getAShorturl = asyncHandler(async (req, res) => {
  // get the url from the request body
  const { url } = req.params;

  // if url not found return a new error with the status code 400
  if (!url) {
    throw new ApiError(400, "Please provide a short url");
  }

  // update the visit history in the database
  const entry = await Url.findOneAndUpdate(
    { shortUrl: url },
    {
      $push: {
        visitHistory: {
          timestamp: Date.now(),
        },
      },
    }
  );

  // if there is no entry return a new error with status code 404
  if (!entry) {
    console.log("ENTRY NOT FOUND");
    throw new ApiError(404, "Redirect url not found");
  }

  // add the url in the redis cache for faster retrieval
  redisClient.set(url, entry.redirectUrl);

  // return the redirected url and successfull message
  return res
    .status(200)
    .json(
      new ApiResponse(
        201,
        { originalUrl: entry.redirectUrl },
        "Redirect url fetched successfully"
      )
    );
});

/**
 * @access Private
 * @desc Updates the visit history of the url by fetching data from the redis server
 * @param {string} url - url
 */
const updateTimeStampOfShortUrl = async (url) => {
  try {
    // get the key
    const rediKey = `url:${url}:history`;

    // get visited history from redis
    const visitHistory = await redisClient.lRange(rediKey, 0, -1);

    if (!visitHistory) return;

    // parse the data
    const parsedUpdatedHistory = visitHistory.map((item) => JSON.parse(item));

    // update the data from redis to mongodb
    const updatePromises = parsedUpdatedHistory.map(async (item) => {
      await Url.findOneAndUpdate(
        { shortUrl: url },
        {
          $push: {
            visitHistory: {
              timestamp: Number(item),
            },
          },
        },
        { new: true } // Option to return the updated document
      );
    });

    await Promise.all(updatePromises);

    // delete the data from redis cache
    await redisClient.del(rediKey);
  } catch (error) {
    console.log(error);
    throw new ApiError(500, "Internal Error");
  }
};

/**
 * @route GET /api/v1/url/register
 * @access Private
 * @desc Get analytics of a url
 * @param {string} url - url
 * @returns {Object} The analytics of the url
 */
const getAnalytics = asyncHandler(async (req, res) => {
  // get th url from the request object
  const { url } = req.params;

  // if there is no url return a new url with status code of 400
  if (!url) {
    throw new ApiError(400, "Please provide a short url");
  }

  // update time stamp of url from the redis client
  await updateTimeStampOfShortUrl(url);

  // fetch url data from the database
  const result = await Url.findOne({ shortUrl: url });

  // if there is no result return a new error with status code 400
  if (!result) {
    return res.status(400).json(new ApiResponse(400, {}, "Url not found"));
  }

  // return the analytics data
  return res.status(200).json(
    new ApiResponse(
      201,
      {
        totalClicks: result.visitHistory.length,
        analytics: result.visitHistory,
        result,
      },
      "Analytics fetched successfully"
    )
  );
});

/**
 * @route DELETE /api/v1/url/register
 * @access Private
 * @desc Delete a short url
 * @param {string} url - url to delete
 * @returns {Object} The short url generated
 */
const deleteShortUrl = asyncHandler(async (req, res) => {
  // get url from the request object
  const { url } = req.params;

  // if there is no url return a new error with status code 400
  if (!url) {
    return res.status(400).json(new ApiError(400, "Url is required"));
  }

  // get userId from the resuest object
  const userId = req.user?._id;

  // if there is no userId return a new error with status code 401
  if (!userId) {
    return res.status(401).json(new ApiError(401, "Unauthorized user"));
  }

  // fetch data from the database
  const data = await Url.findOne({ shortUrl: url });

  // if data not found return a new error with status code 400
  if (!data) {
    throw new ApiError(400, "Url not found");
  }

  // check is that url is generated by the logged in user or not
  if (!userId.equals(data.userId)) {
    throw new ApiError(404, "Url cannot be deleted");
  }

  // delete the url
  await Url.findOneAndDelete({ shortUrl: url });

  // remove the url from redis cache
  redisClient.del(url);

  // return an empty object and a successfull message
  return res
    .status(200)
    .json(new ApiResponse(201, {}, "Url deleted successfully"));
});

// export all the methods
export {
  createNewShortUrl,
  getUserShortUrls,
  getAShorturl,
  getAnalytics,
  deleteShortUrl,
  updateTimeStampOfShortUrl,
};
